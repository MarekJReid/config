conky.config = {
    background = true,
    update_interval = 1,
    total_run_times = 0,
    double_buffer = true,
    no_buffers = true,
    text_buffer_size = 2048,
    own_window = true,
    own_window_type = 'desktop',
    own_window_transparent = true,
    own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',
    border_inner_margin = 0,
    border_outer_margin = 0,
    xinerama_head = 0,
    alignment = 'top_right',
    gap_x = 10,
    gap_y = 40,
    minimum_width = 260,
    minimum_height = 5,
    draw_shades = false,
    draw_outline = false,
    draw_borders = false,
    stippled_borders = 0,
    border_width = 0,
    uppercase = false,
    use_xft = true,
    font = 'Liberation Sans:size=10',
    xftalpha = 0.8,
    default_color = 'white',
    own_window_argb_visual = true,
    own_window_argb_value = 0,
}

conky.text = [[
${color white}${font Liberation Sans:style=Bold:size=16}${time %H:%M:%S}${font}
${color white}${font Liberation Sans:style=Bold:size=12}${time %A, %B %d}${font}
${color white}Vim Essentials Cheatsheet & Guide
${color lightgrey}Published: August 5, 2023
${color lightgrey}This is my Vim cheatsheet with all of the most essential commands! You can check out my youtube video for a complete guide on how almost all of these work and how I go about remembering them.

${color white}Changing Vim Modes
${hr}
${color white}Command	Description
${color lightgrey}i	Enter INSERT mode
${color lightgrey}a	Enter INSERT mode after the cursor (think: append)
${color lightgrey}A	Enter INSERT mode at the end of the line (think: Append)
${color lightgrey}o	Open new line below the cursor and enter INSERT mode
${color lightgrey}O	Open new line above the cursor and enter INSERT mode
${color lightgrey}v	Enter VISUAL mode
${color lightgrey}Ctrl-v	Enter VISUAL-BLOCK mode
${color lightgrey}:	Enter COMMAND-LINE mode
${color lightgrey}R	Enter REPLACE mode
${color lightgrey}ESC	Go back to NORMAL mode from other modes

${color white}Exiting
${hr}
${color white}Command	Description
${color lightgrey}:w	Write (save) file without exiting
${color lightgrey}:wa	Write (save) all open files without exiting
${color lightgrey}:q	Quit but fail if unsaved changes exist
${color lightgrey}:q!	Quit and discard unsaved changes
${color lightgrey}:wq or :x	Write (save) and quit
${color lightgrey}:wqa	Write and quit on all open files

${color white}Moving Around Within Vim
${hr}
${color white}Arrows
${color lightgrey}Command	Description
${color lightgrey}h	Move cursor left (left most)
${color lightgrey}j	Move cursor down (looks like down arrow)
${color lightgrey}k	Move cursor up
${color lightgrey}l	Move cursor right (right most)

${color white}Movements Within A Line
${hr}
${color white}Command	Description
${color lightgrey}$	Move cursor to the end of the line
${color lightgrey}0	Move cursor to the beginning of the line
${color lightgrey}^	Move cursor to the first non-blank character in the line
${color lightgrey}fx	Find the next occurrence of character ‘x’
${color lightgrey}Fx	Find the previous occurrence of character ‘x’
${color lightgrey}tx	Go towards the next occurrence of character ‘x’ (stops right before it)
${color lightgrey}Tx	Go towards the previous occurrence of character ‘x’ (stops right before it)
${color lightgrey};	Repeat the previous f, F, t, or T movement forwards
${color lightgrey},	Repeat the previous f, F, t, or T movement backward

${color white}Word Movements
${hr}
${color lightgrey}Definitions:
${color lightgrey}word: Sequence of letters, digits, and underscores OR a sequence of other symbols, separated by whitespace. Use :h word to learn more.
${color lightgrey}WORD: Any sequence of non-blank characters (any symbols, letters, digits, etc…), separated by whitespace. Use :h WORD to learn more.

${color white}Command	Description
${color lightgrey}w	Move cursor forwards to the start of a word (sequence of letters, digits, underscores OR a sequence of other symbols)
${color lightgrey}W	Move cursor forwards to the start of a WORD (any sequence of non-blank characters)
${color lightgrey}b	Move cursor backwards to the start of a word (sequence of letters, digits, underscores OR a sequence of other symbols)
${color lightgrey}B	Move cursor backwards to the start of a WORD (any sequence of non-blank characters)
${color lightgrey}e	Move cursor forwards to the end of a word (sequence of letters, digits, underscores OR a sequence of other symbols)
${color lightgrey}E	Move cursor forwards to the end of a WORD (any sequence of non-blank characters)
${color lightgrey}ge	Move cursor backwards to the end of a word (sequence of letters, digits, underscores OR a sequence of other symbols)
${color lightgrey}gE	Move cursor backwards to the end of a WORD (any sequence of non-blank characters)

${color white}Sentence Movements
${hr}
${color lightgrey}Definitions
${color lightgrey}sentence: A sentence ends with a ”.”, ”!” or ”?” followed by the end of the line, a space or tab. Use :h sentence to learn more.

${color white}Command	Description
${color lightgrey})	Move cursor to the next sentence
${color lightgrey}(	Move cursor to the previous sentence

${color white}Paragraph Movements
${hr}
${color white}Definitions:
${color lightgrey}paragraph: Blocks of consecutive non-empty lines. NOTE: A line with white space is not empty. Use :h paragraph to learn more.

${color white}Command	Description
${color lightgrey}}	Move cursor to the next paragraph (block of consecutive non-empty lines)
${color lightgrey}{	Move cursor to the previous paragraph (block of consecutive non-empty lines)

${color white}Moving To Specific Lines
${hr}
${color white}Note: Replace {number} with an actual number. You can also use numbers in front of other cursor movements like {number}w, {number}b, or {number} and many others.

${color white}Command	Description
${color lightgrey}gg	Move cursor to the first line of the document
${color lightgrey}G	Move cursor to the last line of the document
${color lightgrey}{number}G	Move cursor to line {number}
${color lightgrey}{number}j	Go {number} lines down
${color lightgrey}{number}k	Go {number} lines up
${color lightgrey}H	Move cursor to the line at the top of the window
${color lightgrey}M	Move cursor to the line at the middle of the window
${color lightgrey}L	Move cursor to the line at the bottom of the window

${color white}Parenthesis, Bracket, Curly Brace, and Method Navigation
${hr}
${color lightgrey}Command	Description
${color lightgrey}%	Find the next parenthesis, bracket, or curly brace in front of or under the cursor and jump to its match
${color lightgrey}[()]	Go to the previous unmatched (
${color lightgrey}[{}]	Go to the previous unmatched {
${color lightgrey}[)]	Go to the next unmatched )
${color lightgrey}[}]	Go to the next unmatched }
${color lightgrey}]m	Go to the next start of a method (Java-like languages)
${color lightgrey}]M	Go to the next end of a method
${color lightgrey}[m	Go to the previous start of a method
${color lightgrey}[M	Go to the previous end of a method

${color white}Screen Related Cursor Movements
${hr}
${color lightgrey}Command	Description
${color lightgrey}Ctrl-F	Move cursor forwards one full screen
${color lightgrey}Ctrl-B	Move cursor backward one full screen
${color lightgrey}Ctrl-D	Move cursor down half a screen
${color lightgrey}Ctrl-U	Move cursor up half a screen

${color white}Scrolling While Leaving Cursor In Place
${hr}
${color lightgrey}Command	Description
${color lightgrey}zz	Place the current cursor line in the middle of the window
${color lightgrey}zt	Place the current cursor line at the top of the window
${color lightgrey}zb	Place the current cursor line at the bottom of the window
${color lightgrey}Ctrl-E	Scroll down a single line, leaving the cursor in place
${color lightgrey}Ctrl-Y	Scroll up a single line, leaving the cursor in place

${color white}Search Movements
${hr}
${color lightgrey}Note: Use :set ignorecase for case-insensitive searching and :set smartcase to override case insensitivity if the search pattern has uppercase characters.

${color white}Command	Description
${color lightgrey}/pattern	Search forward for the pattern
${color lightgrey}?pattern	Search backward for the pattern
${color lightgrey}*	Search forward for the word under or in front of the cursor
${color lightgrey}#	Search backward for the word under or in front of the cursor
${color lightgrey}n	Repeat the last search in the same direction
${color lightgrey}N	Repeat the last search in the opposite direction

${color white}Tip: Use :nohl after a search to temporarily turn off search highlights until another search command is used.

${color white}Navigating The Jump List
${hr}
${color white}Context

${color lightgrey}Certain Vim movements that move the cursor several lines away will add entries to the jump list. You can display the jump list with :jump.

${color lightgrey}Common commands that will add entries to the jump list: G, gg, [number]G, /,?, n, N, %, (, ), {, }, :s, L, M, H. Navigating to a different file/buffer in the same window also works.

${color lightgrey}IMPORTANT: [number]j and [number]k will not add entries to the jump list.

${color white}Command	Description
${color lightgrey}Ctrl-O	Go to the previous cursor position in the jump list
${color lightgrey}Ctrl-I	Go to the next cursor position in the jump list

${color white}Editing Text
${hr}
${color lightgrey}Now that you know how to move within Vim, editing text will go hand in hand with Vim movements.

${color lightgrey}Note: A {motion} is a Vim command that moves the cursor. Like many of the commands described in the previous section.

${color white}Deletion
${hr}
${color lightgrey}Command	Description
${color lightgrey}d{motion}	Delete the text that the {motion} command moves over and copy it into the register.
${color lightgrey}dd	Delete the whole current line and copy it into the register.
${color lightgrey}D	Delete from under the cursor to the end of the line and copy it into the register.

${color white}Tip: You can also use a {number} before these commands to execute the deletion that {number} of times.

${color white}Some Examples
${hr}
${color white}Example	Description
${color lightgrey}dw	Delete from the cursor's current position to the start of the next word
${color lightgrey}de	Delete from the cursor's current position to the end of the word
${color lightgrey}dG	Delete from the cursor's current position to the end of the file
${color lightgrey}d]}	Delete from the cursor's current position to the next unmatched }
${color lightgrey}2dd	Delete the whole line under the cursor and the line below it.

${color white}Undo & Redo
${hr}
${color lightgrey}Command	Description
${color lightgrey}u	Undo the last change
${color lightgrey}Ctrl-R	Redo changes that have been undone with u

${color white}Tip: You can also use {number} before these undo & redo commands to execute it that {number} of times.

${color white}Changing Text
${hr}
${color lightgrey}Note: Executing a change command with c is pretty much the same as d except that it takes you into insert mode afterward.

${color lightgrey}Command	Description
${color lightgrey}c{motion}	Delete the text that the {motion} command moves over, copy it into the register, and enter insert mode.
${color lightgrey}cc	Delete the whole current line, copy it into the register, and enter insert mode.
${color lightgrey}C	Delete from under the cursor to the end of the line, copy it into the register, and enter insert mode.

${color white}Examples would be the same as with delete but changing c to d.

${color white}Repeating a File Change
${hr}
${color white}Command	Description
${color lightgrey}.	Repeat the last change you made to the file

${color white}Tip: You can use {number} before . to repeat the change that {number} of times.

${color white}This is a really nice one!

${color white}Replacing & Deleting Characters
${hr}
${color lightgrey}Note: When executing, substitute {character} with an actual character.

${color lightgrey}Command	Description
${color lightgrey}r{character}	Replace the current character under
${color white}Vim Essentials Cheatsheet & Guide
${color lightgrey}Published: August 5, 2023
${color lightgrey}This is my Vim cheatsheet with all of the most essential commands! You can check out my youtube video for a complete guide on how almost all of these work and how I go about remembering them.

${color white}Changing Vim Modes
${hr}
${color white}Command	Description
${color lightgrey}i	Enter INSERT mode
${color lightgrey}a	Enter INSERT mode after the cursor (think: append)
${color lightgrey}A	Enter INSERT mode at the end of the line (think: Append)
${color lightgrey}o	Open new line below the cursor and enter INSERT mode
${color lightgrey}O	Open new line above the cursor and enter INSERT mode
${color lightgrey}v	Enter VISUAL mode
${color lightgrey}Ctrl-v	Enter VISUAL-BLOCK mode
${color lightgrey}:	Enter COMMAND-LINE mode
${color lightgrey}R	Enter REPLACE mode
${color lightgrey}ESC	Go back to NORMAL mode from other modes

${color white}Exiting
${hr}
${color white}Command	Description
${color lightgrey}:w	Write (save) file without exiting
${color lightgrey}:wa	Write (save) all open files without exiting
${color lightgrey}:q	Quit but fail if unsaved changes exist
${color lightgrey}:q!	Quit and discard unsaved changes
${color lightgrey}:wq or :x	Write (save) and quit
${color lightgrey}:wqa	Write and quit on all open files

${color white}Moving Around Within Vim
${hr}
${color white}Arrows
${color lightgrey}Command	Description
${color lightgrey}h	Move cursor left (left most)
${color lightgrey}j	Move cursor down (looks like down arrow)
${color lightgrey}k	Move cursor up
${color lightgrey}l	Move cursor right (right most)

${color white}Movements Within A Line
${hr}
${color white}Command	Description
${color lightgrey}$	Move cursor to the end of the line
${color lightgrey}0	Move cursor to the beginning of the line
${color lightgrey}^	Move cursor to the first non-blank character in the line
${color lightgrey}fx	Find the next occurrence of character ‘x’
${color lightgrey}Fx	Find the previous occurrence of character ‘x’
${color lightgrey}tx	Go towards the next occurrence of character ‘x’ (stops right before it)
${color lightgrey}Tx	Go towards the previous occurrence of character ‘x’ (stops right before it)
${color lightgrey};	Repeat the previous f, F, t, or T movement forwards
${color lightgrey},	Repeat the previous f, F, t, or T movement backward

${color white}Word Movements
${hr}
${color lightgrey}Definitions:
${color lightgrey}word: Sequence of letters, digits, and underscores OR a sequence of other symbols, separated by whitespace. Use :h word to learn more.
${color lightgrey}WORD: Any sequence of non-blank characters (any symbols, letters, digits, etc…), separated by whitespace. Use :h WORD to learn more.

${color white}Command	Description
${color lightgrey}w	Move cursor forwards to the start of a word (sequence of letters, digits, underscores OR a sequence of other symbols)
${color lightgrey}W	Move cursor forwards to the start of a WORD (any sequence of non-blank characters)
${color lightgrey}b	Move cursor backwards to the start of a word (sequence of letters, digits, underscores OR a sequence of other symbols)
${color lightgrey}B	Move cursor backwards to the start of a WORD (any sequence of non-blank characters)
${color lightgrey}e	Move cursor forwards to the end of a word (sequence of letters, digits, underscores OR a sequence of other symbols)
${color lightgrey}E	Move cursor forwards to the end of a WORD (any sequence of non-blank characters)
${color lightgrey}ge	Move cursor backwards to the end of a word (sequence of letters, digits, underscores OR a sequence of other symbols)
${color lightgrey}gE	Move cursor backwards to the end of a WORD (any sequence of non-blank characters)

${color white}Sentence Movements
${hr}
${color lightgrey}Definitions
${color lightgrey}sentence: A sentence ends with a ”.”, ”!” or ”?” followed by the end of the line, a space or tab. Use :h sentence to learn more.

${color white}Command	Description
${color lightgrey})	Move cursor to the next sentence
${color lightgrey}(	Move cursor to the previous sentence

${color white}Paragraph Movements
${hr}
${color white}Definitions:
${color lightgrey}paragraph: Blocks of consecutive non-empty lines. NOTE: A line with white space is not empty. Use :h paragraph to learn more.

${color white}Command	Description
${color lightgrey}}	Move cursor to the next paragraph (block of consecutive non-empty lines)
${color lightgrey}{	Move cursor to the previous paragraph (block of consecutive non-empty lines)

${color white}Moving To Specific Lines
${hr}
${color white}Note: Replace {number} with an actual number. You can also use numbers in front of other cursor movements like {number}w, {number}b, or {number} and many others.

${color white}Command	Description
${color lightgrey}gg	Move cursor to the first line of the document
${color lightgrey}G	Move cursor to the last line of the document
${color lightgrey}{number}G	Move cursor to line {number}
${color lightgrey}{number}j	Go {number} lines down
${color lightgrey}{number}k	Go {number} lines up
${color lightgrey}H	Move cursor to the line at the top of the window
${color lightgrey}M	Move cursor to the line at the middle of the window
${color lightgrey}L	Move cursor to the line at the bottom of the window

${color white}Parenthesis, Bracket, Curly Brace, and Method Navigation
${hr}
${color lightgrey}Command	Description
${color lightgrey}%	Find the next parenthesis, bracket, or curly brace in front of or under the cursor and jump to its match
${color lightgrey}[()]	Go to the previous unmatched (
${color lightgrey}[{}]	Go to the previous unmatched {
${color lightgrey}[)]	Go to the next unmatched )
${color lightgrey}[}]	Go to the next unmatched }
${color lightgrey}]m	Go to the next start of a method (Java-like languages)
${color lightgrey}]M	Go to the next end of a method
${color lightgrey}[m	Go to the previous start of a method
${color lightgrey}[M	Go to the previous end of a method

${color white}Screen Related Cursor Movements
${hr}
${color lightgrey}Command	Description
${color lightgrey}Ctrl-F	Move cursor forwards one full screen
${color lightgrey}Ctrl-B	Move cursor backward one full screen
${color lightgrey}Ctrl-D	Move cursor down half a screen
${color lightgrey}Ctrl-U	Move cursor up half a screen

${color white}Scrolling While Leaving Cursor In Place
${hr}
${color lightgrey}Command	Description
${color lightgrey}zz	Place the current cursor line in the middle of the window
${color lightgrey}zt	Place the current cursor line at the top of the window
${color lightgrey}zb	Place the current cursor line at the bottom of the window
${color lightgrey}Ctrl-E	Scroll down a single line, leaving the cursor in place
${color lightgrey}Ctrl-Y	Scroll up a single line, leaving the cursor in place

${color white}Search Movements
${hr}
${color lightgrey}Note: Use :set ignorecase for case-insensitive searching and :set smartcase to override case insensitivity if the search pattern has uppercase characters.

${color white}Command	Description
${color lightgrey}/pattern	Search forward for the pattern
${color lightgrey}?pattern	Search backward for the pattern
${color lightgrey}*	Search forward for the word under or in front of the cursor
${color lightgrey}#	Search backward for the word under or in front of the cursor
${color lightgrey}n	Repeat the last search in the same direction
${color lightgrey}N	Repeat the last search in the opposite direction

${color white}Tip: Use :nohl after a search to temporarily turn off search highlights until another search command is used.

${color white}Navigating The Jump List
${hr}
${color white}Context

${color lightgrey}Certain Vim movements that move the cursor several lines away will add entries to the jump list. You can display the jump list with :jump.

${color lightgrey}Common commands that will add entries to the jump list: G, gg, [number]G, /,?, n, N, %, (, ), {, }, :s, L, M, H. Navigating to a different file/buffer in the same window also works.

${color lightgrey}IMPORTANT: [number]j and [number]k will not add entries to the jump list.

${color white}Command	Description
${color lightgrey}Ctrl-O	Go to the previous cursor position in the jump list
${color lightgrey}Ctrl-I	Go to the next cursor position in the jump list

${color white}Editing Text
${hr}
${color lightgrey}Now that you know how to move within Vim, editing text will go hand in hand with Vim movements.

${color lightgrey}Note: A {motion} is a Vim command that moves the cursor. Like many of the commands described in the previous section.

${color white}Deletion
${hr}
${color lightgrey}Command	Description
${color lightgrey}d{motion}	Delete the text that the {motion} command moves over and copy it into the register.
${color lightgrey}dd	Delete the whole current line and copy it into the register.
${color lightgrey}D	Delete from under the cursor to the end of the line and copy it into the register.

${color white}Tip: You can also use a {number} before these commands to execute the deletion that {number} of times.

${color white}Some Examples
${hr}
${color white}Example	Description
${color lightgrey}dw	Delete from the cursor's current position to the start of the next word
${color lightgrey}de	Delete from the cursor's current position to the end of the word
${color lightgrey}dG	Delete from the cursor's current position to the end of the file
${color lightgrey}d]}	Delete from the cursor's current position to the next unmatched }
${color lightgrey}2dd	Delete the whole line under the cursor and the line below it.

${color white}Undo & Redo
${hr}
${color lightgrey}Command	Description
${color lightgrey}u	Undo the last change
${color lightgrey}Ctrl-R	Redo changes that have been undone with u

${color white}Tip: You can also use {number} before these undo & redo commands to execute it that {number} of times.

${color white}Changing Text
${hr}
${color lightgrey}Note: Executing a change command with c is pretty much the same as d except that it takes you into insert mode afterward.

${color lightgrey}Command	Description
${color lightgrey}c{motion}	Delete the text that the {motion} command moves over, copy it into the register, and enter insert mode.
${color lightgrey}cc	Delete the whole current line, copy it into the register, and enter insert mode.
${color lightgrey}C	Delete from under the cursor to the end of the line, copy it into the register, and enter insert mode.

${color white}Examples would be the same as with delete but changing c to d.

${color white}Repeating a File Change
${hr}
${color white}Command	Description
${color lightgrey}.	Repeat the last change you made to the file

${color white}Tip: You can use {number} before . to repeat the change that {number} of times.

${color white}This is a really nice one!

${color white}Replacing & Deleting Characters
${hr}
${color lightgrey}Note: When executing, substitute {character} with an actual character.

${color lightgrey}Command	Description
${color lightgrey}r{character}	Replace the current character under
]]

